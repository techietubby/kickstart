---
- name: Define VM
  hosts: localhost

  vars:
    vmName:        foreman2
    autoStart:     true
    memoryUnit:    MiB
    memory:        20480
    maxMemory:     20480
    vcpu:          2
    maxVcpus:      4
    arch:          x86_64
    # osinfo-query os | grep -i alma
    osVer:         almalinux8
    centosVer:     8
    osImage:       /vms/software/AlmaLinux-8-latest-x86_64-dvd.iso
    rootVg:        vg_system
    poolLoc:       /virt2
    ksLoc:         /var/www/html
    boot_dev:
    - cdrom
    - hd
    bootMenu:      yes
    diskFile:      "{{ poolLoc }}/{{ vmName }}.qcow2"
    diskType:      qcow2
    diskSize:      350
    targetDev:     vda
    interfaceType: bridge
    macAddress:    52:54:00:b3:f9:45
    bridge: br0
    bridgeType:    virtio

    rootPw:        $1$2kODtqw5$kXpYWr/6TMxNgx3gUsW2e.
    vcKeymap:      gb
    xLayouts:      gb
    lang:          en_GB.UTF-8
    timeZone:      Europe/Amsterdam
    netDevice:     eth0
    netIp:         192.168.0.49
    netMask:       255.255.255.0
    gateWay:       192.168.0.2
    nS1:           192.168.0.50
    nS2:           62.179.104.196
    nS3:           213.46.228.196
    searchDM:      persephone.biz persephone.online persephone.local
    nameServer:    "{{ nS1 }},{{ nS2 }},{{ nS3 }}"
    domName:       persephone.local
    hostName:      "{{ vmName }}.{{ domName }}"
    openScap:      https://copr-be.cloud.fedoraproject.org/results/openscapmaint/openscap-latest/epel-{{ centosVer }}-x86_64/

    publicKey:     ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe7UOPHfJirmYOu+2YXifw98f5hRnRsjMMEyy1LRSqgcnlKPlnCbRMo2lGjCkU5DZs1dUzJZWJVKaWEFZWIPXfaKbRH7iJROf7IBIPSThljA08KsL2Y0fUX8GnvFMfdG1cnqvbFCdHCADiO9KoXCD5PRXjYpPgzjPGZw1pls7nlLM5l5+TCSr8c2fRf69VksdFMbUQgluYWmfo5QvV06IhbPrnDpqdFQEAFcw9Yna7jtY3HVVNPmnuSlhI2LDOFP+a2Hq49nrt41wr3HSSRyjyV0U3iUpx6KK7w5sxXbvFWObUh0dlNvWYqE4DTqsDeUh/OJNcfYKxWd305isW9TCx root@localhost.localdomain

    fwService:
    - http
    - https
    - ssh
    - kerberos
    - mountd
    - nfs

    fwPort:
    - 22:tcp
    - 80:tcp
    - 443:tcp
    - 3306:tcp

    logVol:
    - mountPoint: /
      fsType: xfs
      lvName: lv_root
      lvSize: 1024
      fsOptions: none

    - mountPoint: none
      fsType: swap
      lvName: lv_swap
      lvSize: 2048
      fsOptions: none

    - mountPoint: /home
      fsType: xfs
      lvName: lv_home
      lvSize: 1024
      fsOptions: "defaults,nodev,nosuid"

    - mountPoint: /opt
      fsType: xfs
      lvName: lv_opt
      lvSize: 2048
      fsOptions: "defaults,nodev"

    - mountPoint: /tmp
      fsType: xfs
      lvName: lv_tmp
      lvSize: 1024
      fsOptions: "defaults,nodev,nosuid,noexec"

    - mountPoint: /usr
      fsType: xfs
      lvName: lv_usr
      lvSize: 8192
      fsOptions: "defaults,nodev"

    - mountPoint: /var
      fsType: xfs
      lvName: lv_var
      lvSize: 204800
      fsOptions: "defaults,nodev"

    - mountPoint: /var/tmp
      fsType: xfs
      lvName: lv_var_tmp
      lvSize: 1024
      fsOptions: "defaults,nodev,nosuid,noexec"

    - mountPoint: /var/log
      fsType: xfs
      lvName: lv_var_log
      lvSize: 4096
      fsOptions: "defaults,nodev,nosuid,noexec"

    - mountPoint: /var/log/audit
      fsType: xfs
      lvName: lv_audit
      lvSize: 1024
      fsOptions: "defaults,nodev,nosuid,noexec"

    - mountPoint: /vms
      fsType: xfs
      lvName: lv_vms
      lvSize: 8192
      fsOptions: "defaults,nodev"

  tasks:

  - name: Copy kickstart file to HTTP server
    template:
      src:         templates/{{ vmName }}.j2
      dest:        "{{ ksLoc }}/{{ vmName }}.ks"
      owner:       root
      group:       root
      mode:        "0644"
      setype:      httpd_sys_content_t

  - name: get list of VMs
    virt:
      command:    "list_vms"
    register:     vms 

  - name: Ensure VM is destroyed
    virt:
      name:       "{{ vmName }}"
      state:      destroyed
    when: vmName in vms.list_vms

  - name: UnDefine VM
    virt:
      command:    undefine
      name:       "{{ vmName }}"
    when: vmName in vms.list_vms
    ignore_errors: true

  - name: Define and build VM
    shell: |
           virt-install --name={{ vmName }} --memory {{ memory }},maxmemory={{ maxMemory }} --vcpus {{ vcpu }},maxvcpus={{ maxVcpus }} \
           --disk path={{ poolLoc }}/{{ vmName }}.qcow2,size={{ diskSize }} \
           --os-variant={{ osVer }} --os-type linux \
           --network=bridge=br0,model=virtio,driver.iommu=on --graphics none \
           --console pty,target_type=serial \
           --location {{ osImage }} \
           --install kernel_args_overwrite=yes \
           --rng /dev/random,driver.iommu=on --graphics none \
           --initrd-inject={{ ksLoc }}/{{ vmName }}.ks \
           --extra-args="ks=file:/{{ vmName }}.ks console=ttyS0,115200n8 serial net.ifnames=0 biosdevname=0" \
           --boot cdrom,hd,menu=on --accelerate

  - name: Start VM
    virt:
      name:       "{{ vmName }}"
      state:      running
      autostart:  "{{ autostart | default(false) }}"
      # uri: 'qemu:///'

  - name: Show VM status
    virt:
      command:    status
      name:       "{{ vmName }}"

  - name: Show VM info (requires -v)
    virt:
      command:    info
      name:       "{{ vmName }}"

  - name: Show VM info (requires -v)
    debug:
      msg: Enter virsh console {{ vmName }} to monitor the progress of the install
...
